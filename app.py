# app.py

import streamlit as st
import os
import re
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_community.tools.tavily_search import TavilySearchResults
from langgraph.prebuilt import create_react_agent
from langchain_core.messages.ai import AIMessage
from datetime import datetime

# Load environment variables from Streamlit secrets
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
TAVILY_API_KEY = st.secrets["TAVILY_API_KEY"]

# Set Streamlit page config
st.set_page_config(page_title="MIRA - Company Insights", layout="wide")

# Set environment variables (if needed by Tavily or OpenAI directly)
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
os.environ["TAVILY_API_KEY"] = TAVILY_API_KEY

# Logo and title
st.markdown("<h1 style='text-align: center; color: #4a4a4a;'>ü§ñ MIRA - Business Intelligence Chatbot</h1>", unsafe_allow_html=True)
st.markdown("##### Ask me about any company! I‚Äôll give you import/export, global presence, funding, and more.")

# Prompt
DEFAULT_PROMPT = (
    "You are an expert business intelligence analyst. When given a company name, provide a detailed report with the following structure:\n\n"
    "1. üîç Company Overview\n"
    "2. üí∞ Financial Summary (Revenue, Profit, Funding, etc.)\n"
    "3. üì¶ Import Activity\n"
    "4. üö¢ Export Activity\n"
    "5. üåç Global Presence & Offices\n"
    "6. üöõ Freight Forwarding History\n"
    "7. üìå Actionable Insights\n"
    "8. üîó List of References (with clickable links)\n\n"
    "In detail business overview, be clear, concise, and use bullet points or headings for readability. Ensure references are provided within each category itself."
)

# Company extraction logic
def extract_companies(query):
    company_suffixes = ['Inc', 'Ltd', 'LLC', 'PLC', 'GmbH','Industries', 'AG', 'Corp', 'Corporation', 'Co', 'Pvt', 'Limited', 'Group', 'S.A.', 'S.A.S.', 'S.L.', 'S.L.U.']
    suffix_pattern = r'\b(?:[A-Z][a-zA-Z&.\'-]*\s?)+(?:' + '|'.join(company_suffixes) + r')\b'
    capitalized_pattern = r'\b[A-Z][a-zA-Z&.\'-]{2,}\b'
    suffix_matches = re.findall(suffix_pattern, query)
    capitalized_matches = re.findall(capitalized_pattern, query)
    potential_companies = list(set(suffix_matches + capitalized_matches))
    return potential_companies

# Clean fallback AI disclaimer
def clean_ai_response(response_text: str) -> str:
    paragraphs = response_text.strip().split("\n\n")
    fallback_indicators = [
        "issue retrieving real-time data",
        "based on my expert knowledge",
        "latest publicly available information",
        "compiled from public sources",
        "prior to june 2024",
        "i can provide a report",
        "real-time data isn't available"
    ]
    first_paragraph = paragraphs[0].lower()
    if any(keyword in first_paragraph for keyword in fallback_indicators):
        paragraphs = paragraphs[1:]
    return "\n\n".join(paragraphs).strip()

# Get response from agent
def get_response_from_ai_agent(llm_id, query, allow_search=True):
    potential_companies = extract_companies(query)

    if len(potential_companies) > 1:
        return "‚ö†Ô∏è Important Notice: Please mention only one company in your query."

    llm = ChatOpenAI(model=llm_id)

    tools = [TavilySearchResults(max_results=5)] if allow_search else []

    agent = create_react_agent(
        model=llm,
        tools=tools,
        state_modifier=DEFAULT_PROMPT
    )

    state = {"messages": query}
    response = agent.invoke(state)

    messages = response.get("messages")
    ai_messages = [msg.content for msg in messages if isinstance(msg, AIMessage)]
    return ai_messages[-1] if ai_messages else "No response generated."


# --- Streamlit UI Logic ---

query = st.text_input("üí¨ Enter your company query", placeholder="Tell me about Tesla Inc's global operations...")

col1, col2 = st.columns([1, 1])

if col1.button("Run Analysis", use_container_width=True) or query:
    if query.strip() == "":
        st.warning("Please enter a company-related query.")
    else:
        with st.spinner("Generating detailed company report..."):
            raw_response = get_response_from_ai_agent("gpt-4", query, allow_search=True)
            clean_response = clean_ai_response(raw_response)
            st.markdown("### üìä MIRA's Analysis")
            st.markdown(clean_response)

            # Session for download
            st.session_state["response_text"] = clean_response

            # Download button
            col_download, col_share = st.columns([1, 1])
            with col_download:
                st.download_button(
                    label="üìÑ Download Report",
                    data=clean_response,
                    file_name=f"company_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain",
                    use_container_width=True
                )

            with col_share:
                share_text = f"Hey, check out this company analysis generated by MIRA: \n\n{clean_response[:500]}..."
                st.text_area("üì§ Share Preview", share_text, height=150)

